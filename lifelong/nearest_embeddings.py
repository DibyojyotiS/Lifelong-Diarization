# -*- coding: utf-8 -*-
"""median-embeddings.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S1pBoKjWiGmZzCi6tw9-YXdZuzsAGkC1
"""

import numpy as np
from scipy import spatial

"""Distance Calculator"""

def cos_distance(L1, L2):
    result = spatial.distance.cosine(L1, L2)
    return result

"""Nearest Embeddings Identifier"""

def identify_nearest_embeddings(embds, n):
    """
        Take Embeddings of a class and returns index of n embeddings nearest to the centroid
        embds = all embeddings of a speaker, shape = T x D (list or np-array)
        n = number of nearest elements required
        
        nearest_elements = index of embds with minimum distance from mean, shape = 1 x n (np-array)
    """
    embds = np.array(embds)
    centroid = np.mean(embds, axis = 0)

    X = []
    for i in range(len(embds)):
        if len(X)==0 : X = np.array([[i, cos_distance(embds[i], centroid)]])
        else : X = np.vstack((X, [[i, cos_distance(embds[i], centroid)]]))
    # print(X)
    X = X[X[:,1].argsort()]
    
    nearest_elements = X[:,0]
    nearest_elements = np.array(nearest_elements[:n])
    
    return nearest_elements